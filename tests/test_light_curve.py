import numpy as np
import pytest
from batman import TransitParams, _quadratic_ld


@pytest.fixture
def default_params():
    """Provides default TransitParams with valid settings that can be customized per test."""
    params = TransitParams()
    params.limb_dark = "quadratic"
    params.t0 = 0.0
    params.per = 1.0
    params.rp = 0.1
    params.a = 15.0
    params.inc = 87.0
    params.ecc = 0.0
    params.w = 90.0
    params.u = [0.1, 0.3]
    return params


@pytest.fixture
def default_distance():
    ds = np.array(
        [
            1.61354052,
            1.5887914,
            1.5641619,
            1.53965812,
            1.51528651,
            1.49105392,
            1.46696761,
            1.44303525,
            1.41926499,
            1.39566546,
            1.37224583,
            1.34901581,
            1.32598571,
            1.30316648,
            1.28056972,
            1.25820776,
            1.23609368,
            1.21424135,
            1.19266548,
            1.17138167,
            1.15040645,
            1.12975732,
            1.10945279,
            1.08951244,
            1.06995691,
            1.050808,
            1.03208861,
            1.01382281,
            0.99603584,
            0.97875407,
            0.96200497,
            0.9458171,
            0.93022,
            0.91524411,
            0.90092061,
            0.88728133,
            0.87435849,
            0.86218449,
            0.85079166,
            0.84021194,
            0.83047657,
            0.8216157,
            0.81365805,
            0.80663044,
            0.80055749,
            0.79546115,
            0.79136035,
            0.78827071,
            0.78620417,
            0.78516885,
            0.78516885,
            0.78620417,
            0.78827071,
            0.79136035,
            0.79546115,
            0.80055749,
            0.80663044,
            0.81365805,
            0.8216157,
            0.83047657,
            0.84021194,
            0.85079166,
            0.86218449,
            0.87435849,
            0.88728133,
            0.90092061,
            0.91524411,
            0.93022,
            0.9458171,
            0.96200497,
            0.97875407,
            0.99603584,
            1.01382281,
            1.03208861,
            1.050808,
            1.06995691,
            1.08951244,
            1.10945279,
            1.12975732,
            1.15040645,
            1.17138167,
            1.19266548,
            1.21424135,
            1.23609368,
            1.25820776,
            1.28056972,
            1.30316648,
            1.32598571,
            1.34901581,
            1.37224583,
            1.39566546,
            1.41926499,
            1.44303525,
            1.46696761,
            1.49105392,
            1.51528651,
            1.53965812,
            1.5641619,
            1.5887914,
            1.61354052,
        ]
    )
    return ds


def test_quadratic(default_params, default_distance):
    expected_result = np.array(
        [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            0.99986248,
            0.99931412,
            0.9985543,
            0.99766504,
            0.99669959,
            0.99569984,
            0.99470166,
            0.99373764,
            0.99283893,
            0.99203774,
            0.99137274,
            0.99091619,
            0.99074759,
            0.99061728,
            0.99050943,
            0.9904186,
            0.99034147,
            0.99027575,
            0.99021981,
            0.9901724,
            0.99013257,
            0.99009957,
            0.99007285,
            0.99005195,
            0.99003655,
            0.99002642,
            0.99002138,
            0.99002138,
            0.99002642,
            0.99003655,
            0.99005195,
            0.99007285,
            0.99009957,
            0.99013257,
            0.9901724,
            0.99021981,
            0.99027575,
            0.99034147,
            0.9904186,
            0.99050943,
            0.99061728,
            0.99074759,
            0.99091619,
            0.99137274,
            0.99203774,
            0.99283893,
            0.99373764,
            0.99470166,
            0.99569984,
            0.99669959,
            0.99766504,
            0.9985543,
            0.99931412,
            0.99986248,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
        ]
    )
    calculated_result = _quadratic_ld._quadratic_ld(
        default_distance, default_params.rp, default_params.u[0], default_params.u[1], 1
    )
    np.testing.assert_allclose(calculated_result, expected_result, atol=1e-7)


def test_linear(default_params, default_distance):
    expected_result = np.array(
        [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            0.99981973,
            0.99914313,
            0.99824654,
            0.99722977,
            0.99615346,
            0.99506316,
            0.99399677,
            0.9929881,
            0.99206942,
            0.99127458,
            0.99064591,
            0.9902692,
            0.99023085,
            0.99020311,
            0.99017912,
            0.99015817,
            0.99013979,
            0.99012367,
            0.9901096,
            0.99009741,
            0.99008697,
            0.99007817,
            0.99007094,
            0.99006523,
            0.99006098,
            0.99005816,
            0.99005676,
            0.99005676,
            0.99005816,
            0.99006098,
            0.99006523,
            0.99007094,
            0.99007817,
            0.99008697,
            0.99009741,
            0.9901096,
            0.99012367,
            0.99013979,
            0.99015817,
            0.99017912,
            0.99020311,
            0.99023085,
            0.9902692,
            0.99064591,
            0.99127458,
            0.99206942,
            0.9929881,
            0.99399677,
            0.99506316,
            0.99615346,
            0.99722977,
            0.99824654,
            0.99914313,
            0.99981973,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
        ]
    )
    calculated_result = _quadratic_ld._quadratic_ld(
        default_distance, default_params.rp, default_params.u[0], 0.0, 1
    )
    np.testing.assert_allclose(calculated_result, expected_result, atol=1e-7)
